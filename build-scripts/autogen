#!/bin/sh -e

#
# This script runs autogen.sh on each of the CFEngine repositories.
# Please note that it does not run configure.
#
# The script expects the following repositories to exist side by side:
# .
# ├── buildscripts
# ├── core
# ├── enterprise
# ├── nova
# └── masterfiles
#
# The script can be run as follows:
# ```
# $ PROJECT=[nova|community] ./buildscripts/build-scripts/autogen
# ```
#

# Get the BASEDIR variable holding the path to where our repos are checked out
. "$(dirname "$0")/functions"

# Parse the required argument which should be set through the environment
# variable PROJECT
case "$PROJECT" in
community)
    NOVA=no
    ;;
nova)
    NOVA=yes
    ;;
*)
    if [ -z "${PROJECT}" ]; then
        echo "$(basename "$0"): Error: Expected environment variable PROJECT=[community|nova]"
    else
        echo "$(basename "$0"): Error: Unknown project '$PROJECT', expected 'community' or 'nova'"
    fi
    echo "Usage: PROJECT=[community|nova] $0"
    exit 42
    ;;
esac

# Determine which repositories should be included
projects="core masterfiles"
if test "$NOVA" = "yes"; then
    projects="$projects enterprise nova"
fi

# Fail early by checking that the required repositories are present before
# running the autogen.sh.
for proj in $projects; do
    if [ ! -d "$BASEDIR/$proj" ]; then
        echo "$(basename "$0"): Error: Expected to find the '$proj' repository in '$BASEDIR', but it's not there"
        exit 1
    fi
done

# Run autogen.sh on each repository
for proj in $projects; do
    # autogen.sh is quite verbose, so only print the output in case of failure
    echo "$(basename "$0"): Debug: Running autogen.sh for project $proj..."
    (
        cd "$BASEDIR/$proj"
        NO_CONFIGURE=1 run_and_print_on_failure ./autogen.sh
    )
done

# Create revision files (containing the N first hex decimals from the last
# commit of the current branch)
./"$(dirname "$0")/revision-file"

# Compare versions between the CFEngine repositories to make sure they
# match
./"$(dirname "$0")/compare-versions"
