#!/bin/sh -x

. `dirname "$0"`/functions
. detect-environment
. compile-options

TRANSFER_SCRIPT=$BASEDIR/prepare-testmachine-chroot-transfer-script.rsync
# Don't lose the trailing slash!
CHROOT_ROOT=$HOME/testmachine-chroot/

sudo mkdir -p $CHROOT_ROOT

sudo $FUSER -k $CHROOT_ROOT || true
sudo umount ${CHROOT_ROOT}proc || true

echo "P $BASEDIR" > $TRANSFER_SCRIPT
echo "P $PREFIX" >> $TRANSFER_SCRIPT
generate_chroot_transfer_script >> $TRANSFER_SCRIPT

RETURN_CODE=0
sudo rsync --filter=". $TRANSFER_SCRIPT" -Da --delete --delete-excluded / $CHROOT_ROOT || RETURN_CODE=$?
# Return code 24 means "some files vanished before they could be transferred",
# which we don't care about, since a running system might experience this
# without it being an error.
if [ $RETURN_CODE -ne 0 -a $RETURN_CODE -ne 24 ]; then
    exit $RETURN_CODE
fi

sudo mkdir -p ${CHROOT_ROOT}tmp
sudo chmod 1777 ${CHROOT_ROOT}tmp
sudo mkdir -p ${CHROOT_ROOT}var/tmp
sudo chmod 1777 ${CHROOT_ROOT}var/tmp

sudo mkdir -p ${CHROOT_ROOT}run

sudo mkdir -p ${CHROOT_ROOT}root

# Safeguard to terminate operation if we have somehow ended up outside the
# chroot, so we don't start running unsafe tests there.
sudo touch ${CHROOT_ROOT}inside-chroot.txt

# Trick in order to get a login command that starts out in the home dir instead of the root.
# See the login command for chroot in test-on-testmachine
sudo bash -c "cat > ${CHROOT_ROOT}run-in-home-dir.sh" <<EOF
#!/bin/sh -x
if [ ! -f /inside-chroot.txt ]; then
    echo Something is wrong. We should be inside the chroot now. Bailing...
    exit 2
fi
cd $HOME
EOF

# Include entire environment in chroot, and make sure everything is exported,
# and added to the existing environment.
# Split on newlines, not on spaces.
IFS='
'
for entry in $(export)
do
    name=$(echo "$entry" | sed -e 's/^[^=]* //; s/^\([^=]*\)=.*/\1/')
    if [ "$name" = "PATH" ]
    then
        continue
    fi
    value="$(echo "$entry" | sed -e 's/^[^=]*=//')"
    printf "%s=%s\nexport %s\n" "$name" "$value" "$name"
done | sudo sh -c "cat >> ${CHROOT_ROOT}run-in-home-dir.sh"
# Restore normal splitting semantics.
unset IFS

# Treat PATH specifically, and add to existing path.
printf 'PATH="%s:$PATH"\nexport PATH\n' "$PATH" | sudo sh -c "cat >> ${CHROOT_ROOT}run-in-home-dir.sh"

# Note different quote style on Here document.
sudo bash -c "cat >> ${CHROOT_ROOT}run-in-home-dir.sh" <<'EOF'
exec "$@"
EOF

sudo chmod ugo+x ${CHROOT_ROOT}run-in-home-dir.sh

sudo mkdir -p ${CHROOT_ROOT}proc

if [ ! -e ${CHROOT_ROOT}dev ]; then
    sudo mkdir -p ${CHROOT_ROOT}dev
    sudo dd if=/dev/urandom of=${CHROOT_ROOT}dev/urandom bs=1048576 count=10
    sudo dd if=/dev/urandom of=${CHROOT_ROOT}dev/random bs=1048576 count=10
fi
