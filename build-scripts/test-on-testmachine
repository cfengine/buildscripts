#!/bin/sh -x

. `dirname "$0"`/functions
. detect-environment
. compile-options

case "$TEST_MACHINE" in
    chroot)
        SCRIPT=test-chroot
        # Don't lose the trailing slash!
        CHROOT_ROOT=$HOME/testmachine-chroot/
        LOGIN_COMMAND="sudo chroot $CHROOT_ROOT /run-in-home-dir.sh"
        TESTMACHINE_URI=$CHROOT_ROOT

        sudo umount ${CHROOT_ROOT}proc || true
        mount_procfs ${CHROOT_ROOT}proc
        ;;
    *)
        # Add VMs, etc here.
        echo "Only chroot test machines are supported at the moment."
        exit 1
        ;;
esac

SCRIPT_BASEDIR="$(cd "$(dirname "$0")" ; pwd)" # /home/user/whatever/buildscripts/build-scripts
SCRIPT_BASEDIR="$(dirname "$SCRIPT_BASEDIR")" # /home/user/whatever/buildscripts
SCRIPT_BASEDIR="$(dirname "$SCRIPT_BASEDIR")" # /home/user/whatever

# We need to perform several cleanup tasks if doing a chroot test run, so wrap this in an if.
if remote_script_general "$SCRIPT" "$LOGIN_COMMAND" "$SCRIPT_BASEDIR"; then
    return_code=0
else
    return_code=$?
fi

case "$TEST_MACHINE" in
    chroot)
        echo "Checking for stale processes in the chroot path: $CHROOT_ROOT"
        sudo $FUSER -v $CHROOT_ROOT 2>&1
        if [ $? -eq 0 ]
        then
            echo "ERROR: Found processes left behind in the chroot - I'm killing them, but the build will fail"
            sudo $FUSER -k $CHROOT_ROOT || true
            return_code = 1
        fi

        sudo umount ${CHROOT_ROOT}proc || true
        ;;
esac

# Collect test results.
INCLUDES='--include=test.* --include=summary.*'
# Note: Don't use sudo or "rsync -a", because we don't want root-owned files
# to show up in the results.
rsync -rv $INCLUDES --exclude="*" \
    $TESTMACHINE_URI$BASEDIR/core/tests/acceptance/ \
                    $BASEDIR/core/tests/acceptance/

if [ $PROJECT = nova ]
then
    rsync -rv $INCLUDES --exclude="*" \
        $TESTMACHINE_URI$BASEDIR/enterprise/tests/acceptance/ \
                        $BASEDIR/enterprise/tests/acceptance/
    rsync -rv $INCLUDES --exclude="*" \
        $TESTMACHINE_URI$BASEDIR/masterfiles/tests/acceptance/ \
                        $BASEDIR/masterfiles/tests/acceptance/
fi

if [ $return_code -ne 0 ]
then
    exit $return_code
fi
