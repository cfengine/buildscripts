#!/bin/sh -x

. `dirname "$0"`/functions
. detect-environment
. compile-options

case "$TEST_MACHINE" in
    chroot)
        SCRIPT=test-chroot
        # Don't lose the trailing slash!
        CHROOT_ROOT=$HOME/testmachine-chroot/
        LOGIN_COMMAND="sudo chroot $CHROOT_ROOT /run-in-home-dir.sh"
        TESTMACHINE_URI=$CHROOT_ROOT

        sudo umount ${CHROOT_ROOT}proc || true
        mount_procfs ${CHROOT_ROOT}proc
        ;;
    *)
        # Add VMs, etc here.
        echo "Only chroot test machines are supported at the moment."
        exit 1
        ;;
esac

SCRIPT_BASEDIR="$(cd "$(dirname "$0")" ; pwd)" # /home/user/whatever/buildscripts/build-scripts
SCRIPT_BASEDIR="$(dirname "$SCRIPT_BASEDIR")" # /home/user/whatever/buildscripts
SCRIPT_BASEDIR="$(dirname "$SCRIPT_BASEDIR")" # /home/user/whatever

# We need to perform several cleanup tasks if doing a chroot test run, so wrap this in an if.
if remote_script_general "$SCRIPT" "$LOGIN_COMMAND" "$SCRIPT_BASEDIR"
then
    return_code=0
else
    return_code=$?
fi

case "$TEST_MACHINE" in
    chroot)
        # Fuser has special output. The PIDs arrive on stdout, and all the ornaments
        # arrive on stderr, so all we have to do is to grep for PID numbers.
        for pid in `sudo $FUSER $CHROOT_ROOT 2>/dev/null | sed -e 's/[^ 0-9]//g'`
        do
            # Minilogd may sometimes launch on RedHat without any user
            # intervention. Ignore that.
            if ps -ef | egrep "^ *[^ ]+ +$pid" | grep minilogd
            then
                continue
            fi
            # gpg-agent sometimes is spawned on suse during our tests.
            # This happens only in chroot. Ignore that.
            if grep suse /etc/os-release && ps -o command --pid "$pid" | grep "gpg-agent --homedir /var/tmp/zypp.*zypp-trusted.*--daemon"
            then
                continue
            fi

            # gpg-agent sometimes is spawned on Ubuntu 24 during our tests.
            # This happens only in chroot. Ignore that.
            if grep "Ubuntu 24" /etc/os-release && ps -o command --pid "$pid" | grep "gpg-agent --homedir /etc/apt/sources.list.d/.gnupg-temp --use-standard-socket --daemon"
            then
                continue
            fi

            # Leaving processes behind is an error. It should never happen.
            return_code=1
            (
                # This next part is very confusing when mixed with "set -x".
                # Turn it off inside the subshell while printing this.
                set +x
                echo "Error: Found processes left behind in the chroot. I'm killing them, but the build will fail, so clean up your mess!"
                echo "Found PID $pid. Info from 'ps -ef'"
                echo "--------------"
                ps -ef | grep $pid | grep -v grep
                echo "--------------"
            )
        done

        sudo $FUSER -k $CHROOT_ROOT || true
        sudo umount ${CHROOT_ROOT}proc || true
        ;;
esac

# Collect test results.
INCLUDES='--include=test.* --include=summary.*'
# Note: Don't use sudo or "rsync -a", because we don't want root-owned files
# to show up in the results.
rsync -rv $INCLUDES --exclude="*" \
    $TESTMACHINE_URI$BASEDIR/core/tests/acceptance/ \
                    $BASEDIR/core/tests/acceptance/ \
    >> rsync.log

if [ $PROJECT = nova ]
then
    rsync -rv $INCLUDES --exclude="*" \
        $TESTMACHINE_URI$BASEDIR/enterprise/tests/acceptance/ \
                        $BASEDIR/enterprise/tests/acceptance/ \
        >> rsync.log
    rsync -rv $INCLUDES --exclude="*" \
        $TESTMACHINE_URI$BASEDIR/masterfiles/tests/acceptance/ \
                        $BASEDIR/masterfiles/tests/acceptance/ \
        >> rsync.log
fi

if [ $return_code -ne 0 ]
then
    echo "ERROR: we just finished cleaning up, but earlier command had returned: $return_code"
    exit $return_code
fi
