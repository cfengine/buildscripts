# -*- mode:sh -*-

#
# We need to know what project are we building.
#

[ "$PROJECT" ] || if [ -d $BASEDIR/nova ]; then
  PROJECT=nova
else
  PROJECT=community
fi

export PROJECT

case "$OS_FAMILY" in
  aix)
    # This flag is needed because AIX defaults to producing .a shared libraries,
    # but we need it to make .so libraries. It doesn't work correctly when
    # specified in the Makefile, so we specify it in the environment instead.
    LDFLAGS=-Wl,-brtl;;
esac
export LDFLAGS

# Should we package libgcc_s.so.1?

case "$OS_FAMILY" in
  solaris|aix)
    LIBGCC=yes;;
  *)
    LIBGCC=no;;
esac

# libsasl needed for solaris

case "$OS_FAMILY" in
  solaris|hpux)
    LIBSASL=yes;;
  *)
    LIBSASL=no;;
esac

# iconv is needed for libxml2 on some platforms
case "$OS_FAMILY" in
   aix)
     LIBICONV=yes;;
   solaris)
     LIBICONV=yes;;
   *)
     LIBICONV=no;;
esac

# Do we need libgnurx-0.dll?

case "$OS_FAMILY" in
  mingw)
    GNURX=yes;;
  *)
    GNURX=no;;
esac

# Do we need to build pthreads-w32?

case "$OS_FAMILY" in
  mingw)
    PTHREADS_W32=yes;;
  *)
    PTHREADS_W32=no;;
esac

# Embedded DB selection

EMBEDDED_DB=lmdb
export EMBEDDED_DB

# libxml2

case "$OS_FAMILY" in
  *)
    LIBXML2=yes;;
esac

export LIBXML2

# libvirt

case "$ARCH-${OS_FAMILY}" in
  s390*-*)
    LIBVIRT=no;;
  *-linux)
    case "${OS}-${OS_VERSION}" in
      debian-3.1)
        LIBVIRT=no;;
      *-*)
        LIBVIRT=yes;;
    esac;;
  *-mingw|*-aix|*-*bsd|*-solaris|*-hpux)
    LIBVIRT=no;;
  *)
    echo "Unknown combination of architecture and OS family: $ARCH-${OS_FAMILY}"
    exit 42;;
esac

export LIBVIRT

# ROLE
# We can autodetect if we are building a hub or an agent, but
# that is suboptimal since the list might change at any time or
# we might want to build an agent package for a platform that is a hub
# or viceversa. By default we assume the old behavior but if the 
# environment variable EXPLICIT_ROLE is defined, then we change our behavior
# and build according to the role specified by it.

case "$EXPLICIT_ROLE" in
  agent) ROLE=agent;;
  hub) ROLE=hub;;
*)
  echo "Using auto detection of role."
  case "$PROJECT-$ARCH-$OS-${OS_VERSION}" in
    community-*) ROLE=agent;;
# We do not support 32 bits hubs anymore
	nova-i386-*-*) ROLE=agent;;
    nova-s390*-*-*) ROLE=agent;;
    nova-*-centos-[56789].*) ROLE=hub;;
    nova-*-debian-6.*) ROLE=hub;;
    nova-*-opensuse-11.*) ROLE=hub;;
    nova-*-rhel-[56789].*) ROLE=hub;;
    nova-*-sles-11.*) ROLE=hub;;
    nova-*-ubuntu-8.04) ROLE=hub;;
    nova-*-ubuntu-10.04) ROLE=hub;;
    nova-*-ubuntu-12.04) ROLE=hub;;
    nova-*-ubuntu-14.04) ROLE=hub;;
    nova-*-mingw-*) ROLE=agent;;
    nova-*) ROLE=agent;;
    *)
      echo "Unknown project: $PROJECT"
      exit 42;;
  esac;;
esac 
export ROLE

# libmcrypt

case "$ROLE" in
  hub) LIBMCRYPT=yes;;
  agent) LIBMCRYPT=no;;
esac

export LIBMCRYPT

# LDAP

case "$PROJECT" in
  community)
    OPENLDAP=no;;
  nova)
    OPENLDAP=yes;;
  *)
    echo "Unknown project: $PROJECT"
    exit 42;;
esac

export OPENLDAP

#SQL drivers

case "$OS_FAMILY" in
  aix)
    SQL=no;;
  *)
    SQL=yes;;
esac

export SQL

# libacl & libattr
case "$OS_FAMILY" in
  hpux)
    LIBACL=no
    LIBATTR=no;;
  aix)
    LIBACL=no
    LIBATTR=no;;
  solaris)
    LIBACL=no
    LIBATTR=no;;
  freebsd)
    LIBACL=no
    LIBATTR=no;;
  mingw)
    LIBACL=no
    LIBATTR=no;;
  *)
    LIBACL=yes
    LIBATTR=yes;;
esac

export LIBATTR LIBACL

## PHP modules

case "$ROLE" in
  hub)
    APR=yes
    APR_UTIL=yes
    APACHE=yes
    PHP=yes
    LIBCURL=yes
    GIT=yes
    RSYNC=yes
    # Needed by PHP, see redmine#7270
    LIBICONV=yes

    case "$OS-${OS_VERSION}" in
      rhel-[5].*) PHP_JSON=yes;;
      centos-[5].*) PHP_JSON=yes;;
      *) PHP_JSON=no;;
    esac

    case "$OS-${OS_VERSION}" in
      rhel-[56].*) PHP_MCRYPT=yes;;
      centos-[6].*) PHP_MCRYPT=yes;;
      *) PHP_MCRYPT=no;;
    esac

    case "$OS-${OS_VERSION}" in
      ubuntu-8.04|sles-*|centos-5.*|rhel-5.*)
        PHP_CURL_5_2=yes
        PHP_CURL=no;;
      *)
        PHP_CURL_5_2=no
        PHP_CURL=yes;;
    esac
    ;;
  agent)
    APACHE=no
    PHP=no
    LIBCURL=no
    GIT=no
    RSYNC=no
    ;;
esac

export APACHE PHP LIBCURL GIT

case "$ROLE" in
  hub)
    REDIS=yes
    PGSQL=yes
    ;;
  agent)
    REDIS=no
    PGSQL=no
    ;;
esac

export PGSQL REDIS

case "$OS_FAMILY" in
  linux)
    WITH_SYSTEMD=yes;;
  *)
    WITH_SYSTEMD=no;;
esac

LIBYAML=yes

# Tests

case "$OS_FAMILY" in
  mingw)
    TESTS=no;;
  freebsd)
    TESTS=no;;
  *)
    TESTS=all;;
esac

export TESTS


# Don't let existing LD_LIBRARY_PATH variables disturb the build.
# Java sets this when Jenkins launches it.
# PS! Solaris shell returns false if the var is already unset.
unset LD_LIBRARY_PATH || true
