# -*- mode:sh -*-

# Calculate dependencies and build parameters according to the environment.
# SOURCE this file, don't execute.

# Autodect PROJECT if not set

if [ x"$PROJECT" = x ]
then
    case x"$JOB_NAME" in
        *-community-*)   PROJECT=community;;
        *-enterprise-*)  PROJECT=nova;;
        *-hub-*)         PROJECT=nova;;
        *-agent-*)       PROJECT=nova;;
    esac
fi

# If still not set, then either we are running outside Jenkins, or this
# is not a main "build" type job (it could be the bootstrap job).
# Do directory-based auto-detection.
if [ x"$PROJECT" = x ]
then
   if [ -d $BASEDIR/nova ]
   then
       PROJECT=nova
   else
       PROJECT=community
   fi
fi

export PROJECT

case "$OS_FAMILY" in
  aix)
    # This flag is needed because AIX defaults to producing .a shared libraries,
    # but we need it to make .so libraries. It doesn't work correctly when
    # specified in the Makefile, so we specify it in the environment instead.
    LDFLAGS="-Wl,-brtl"

    # AIX needs default RPATH (libpath on AIX) specified as well, otherwise it
    # won't find libc.
    LDFLAGS="$LDFLAGS -L$BUILDPREFIX/lib -Wl,-blibpath:$BUILDPREFIX/lib:/usr/lib:/lib"
    ;;
  hpux)
    LDFLAGS="-L$BUILDPREFIX/lib -Wl,+b$BUILDPREFIX/lib"
    ;;
  mingw)
    LDFLAGS="-static-libgcc -L$BUILDPREFIX/lib"
    ;;
  *)
    LDFLAGS="-L$BUILDPREFIX/lib -Wl,-R$BUILDPREFIX/lib"
    ;;
esac
export LDFLAGS

# For Debian builds, which do not automatically inherit build flags
DEB_LDFLAGS_APPEND="$LDFLAGS"
export DEB_LDFLAGS_APPEND

# Embedded DB selection
EMBEDDED_DB="lmdb"



############### Fill in build dependencies in DEPS variable ################

DEPS=
[ $OS_FAMILY = linux ]  &&  var_append DEPS "lcov"
[ $OS_FAMILY = mingw ]  &&  var_append DEPS "pthreads-w32 libgnurx"

# libgcc_s.so is needed before we compile any other dependency
#             on some platforms!
case "$OS_FAMILY" in
    solaris|aix)  var_append DEPS "libgcc" ;;
esac

# FIXME: Why do we need zlib?
# ANSWER: Openssl uses it optionally, TODO DISABLE
var_append DEPS "zlib $EMBEDDED_DB openssl pcre"

# libsasl needed for solaris
case "$OS_FAMILY" in
    solaris|hpux)  var_append DEPS "sasl2" ;;
esac

# iconv is needed for libxml2 on some platforms
case "$OS_FAMILY" in
   aix|solaris)  var_append DEPS "libiconv" ;;
esac

var_append DEPS "libxml2 libyaml"

# LDAP functions in the agent
# and LDAP authentication functionality in Mission Portal
case "$PROJECT" in
    nova)  var_append DEPS "openldap"
esac

# libacl & libattr - not for the exotics (linux only?)
case "$OS_FAMILY" in
  hpux|aix|solaris|freebsd|mingw)       ;;
  *)  var_append DEPS "libattr libacl"  ;;
esac

# ROLE
# We can autodetect if we are building a hub or an agent, but
# that is suboptimal since the list might change at any time or
# we might want to build an agent package for a platform that is a hub
# or viceversa. By default we assume the old behavior but if the
# environment variable EXPLICIT_ROLE is defined, then we change our behavior
# and build according to the role specified by it.

case "$EXPLICIT_ROLE" in
    agent) ROLE=agent;;
    hub)   ROLE=hub;;
    *)
        # Not running under Jenkins?
        if [ x"$JENKINS_SERVER_COOKIE" = x ]
        then
            case "$PROJECT-$ARCH-$OS-${OS_VERSION}" in
                community-*) ROLE=agent;;
                # We do not support 32 bits hubs anymore
                nova-i386-*-*) ROLE=agent;;
                nova-s390*-*-*) ROLE=agent;;
                nova-*-centos-*) ROLE=hub;;
                nova-*-debian-*) ROLE=hub;;
                nova-*-opensuse-*) ROLE=hub;;
                nova-*-rhel-*) ROLE=hub;;
                nova-*-sles-*) ROLE=hub;;
                nova-*-ubuntu-*) ROLE=hub;;
                nova-*-mingw-*) ROLE=agent;;
                nova-*) ROLE=agent;;
                *)
                    echo "Unknown project: $PROJECT"
                    exit 42
                    ;;
            esac
            echo "Autodetected $ROLE role based on missing Jenkins label and OS."

        else    # we are running under Jenkins

            # The "label" variable is set in multi-matrix jobs;
            # thus it is *not set* in the bootstrap job.
            case x"$label" in
                x)
                    echo "label is not set, assuming that this is not the main build job; Setting ROLE=agent."
                    ROLE=agent
                    ;;
                *_HUB_*)
                    echo "Autodetected hub role based on '_HUB_' in Jenkins label."
                    ROLE=hub
                    ;;
                *)
                    echo "Autodetected agent role based on missing '_HUB_' in Jenkins label."
                    ROLE=agent
                    ;;
            esac
        fi
        ;;
esac

export ROLE


## PHP modules

case "$ROLE" in
    # HUB-ONLY dependencies
    hub)
        var_append DEPS "libcurl-hub"
        var_append DEPS "apr apr-util apache git rsync"
        var_append DEPS "postgresql-hub php"
        ;;
    # AGENT-ONLY dependencies
    agent)
        var_append DEPS "libcurl"
        ;;
esac


# systemd is not a build dependency, but should we generate
# unit files for it?
case "$OS_FAMILY" in
  linux)  WITH_SYSTEMD=yes;;
  *)      WITH_SYSTEMD=no;;
esac


case "$OS_FAMILY" in
    mingw|freebsd)  TESTS=no  ;;
    *)              TESTS=all ;;
esac
export TESTS


# Don't let existing LD_LIBRARY_PATH variables disturb the build.
# Java sets this when Jenkins launches it.
# PS! Solaris shell returns false if the var is already unset.
unset LD_LIBRARY_PATH  ||  true
