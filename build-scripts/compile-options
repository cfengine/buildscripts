#!/bin/sh

# Calculate dependencies and build parameters according to the environment.
# SOURCE this file, don't execute.

# Autodect PROJECT if not set

if [ -z "$PROJECT" ]; then
    case "$JOB_NAME" in
    *-community-*) PROJECT=community ;;
    *-enterprise-*) PROJECT=nova ;;
    *-hub-*) PROJECT=nova ;;
    *-agent-*) PROJECT=nova ;;
    esac
fi

# If still not set, then either we are running outside Jenkins, or this
# is not a main "build" type job (it could be the bootstrap job).
# Do directory-based auto-detection.
if [ -z "$PROJECT" ]; then
    if [ -d "$BASEDIR"/nova ]; then
        PROJECT=nova
    else
        PROJECT=community
    fi
fi

export PROJECT

# Detect requirement to use system-provided OpenSSL library.
# When running manually, you can just export this variable.
# It's a flag: if it's set to 1 - then we use system OpenSSL.
# Otherwise, we build it.
if [ -z "$SYSTEM_SSL" ]; then
    # We don't bundle OpenSSL on some redhat-derived systems due to incompatability with libpam and our openssl.
    _OS_MAJOR_VERSION="$(echo "$OS_VERSION" | cut -d. -f1)"
    if [ "$OS" = "rhel" ] && expr "$_OS_MAJOR_VERSION" ">=" "8" >/dev/null; then
        SYSTEM_SSL=1
    fi
    if [ "$OS" = "opensuse" ] || [ "$OS" = "sles" ]; then
        if expr "$_OS_MAJOR_VERSION" ">=" "15"; then
            SYSTEM_SSL=1
        fi
    fi
    # Detect using system ssl when running a Jenkins job
    # shellcheck disable=SC2154
    # > label is referenced but not assigned.
    # This file is sourced by other scripts. label is assigned elsewhere.
    if expr x"$label" ":" ".*systemssl" >/dev/null; then
        SYSTEM_SSL=1
    fi
fi
export SYSTEM_SSL

case "$OS_FAMILY" in
aix)
    # This flag is needed because AIX defaults to producing .a shared libraries,
    # but we need it to make .so libraries. It doesn't work correctly when
    # specified in the Makefile, so we specify it in the environment instead.
    LDFLAGS="-Wl,-brtl"

    # AIX needs default RPATH (libpath on AIX) specified as well, otherwise it
    # won't find libc.
    LDFLAGS="$LDFLAGS -L$BUILDPREFIX/lib -Wl,-blibpath:$BUILDPREFIX/lib:/usr/lib:/lib"
    ;;
hpux)
    LDFLAGS="-L$BUILDPREFIX/lib -Wl,+b$BUILDPREFIX/lib"

    # Use ‘gcc’ when building things on HP-UX
    #
    # HP-UX ships with ‘cc’ which invokes the ‘HP-UX bundled C compiler’ which lacks some functionality we need to build things.
    # Among the other things, it doesn’t know how to link ‘.so’ files directly and it doesn’t recognize them as valid input type.
    CC=gcc
    export CC
    ;;
mingw)
    LDFLAGS="-static-libgcc -L$BUILDPREFIX/lib"
    ;;
solaris)
    LDFLAGS="-L$BUILDPREFIX/lib -Wl,-R$BUILDPREFIX/lib"
    if [ "$(uname -p)" = "sparc" ]; then
        # ensure 64bit builds on SPARC64
        CFLAGS="-m64"
        export CFLAGS
    fi
    ;;
*)
    LDFLAGS="-L$BUILDPREFIX/lib -Wl,-R$BUILDPREFIX/lib"
    ;;
esac

# When we don't bundle OpenSSL, then we need to pull it from /usr/lib64.
if [ "$SYSTEM_SSL" = 1 ]; then
    LDFLAGS="$LDFLAGS -L/usr/lib64"
fi
export LDFLAGS

# For Debian builds, which do not automatically inherit build flags
DEB_LDFLAGS_APPEND="$LDFLAGS"
export DEB_LDFLAGS_APPEND

############### Fill in build dependencies in DEPS variable ################

# shellcheck disable=SC2034
# > DEPS appears unused. Verify use (or export if used externally).
# This file is sourced by other scripts that uses it
DEPS=

# Windows specific dependencies
if [ "$OS_FAMILY" = mingw ]; then
    # Win32 does not support pthreads natively.
    # The pthreads-w32 project provide solution to this problem.
    var_append DEPS "pthreads-w32"

    # A port of the regex functionality from the glibc Library for use on Windows platforms
    var_append DEPS "libgnurx"
fi

# AIX / Solaris specific dependencies
case "$OS_FAMILY" in
solaris | aix)
    # libgcc_s.so is needed before we compile any other dependency on some platforms!
    var_append DEPS "libgcc"

    # iconv is needed for libxml2 on some platforms
    var_append DEPS "libiconv"
    ;;
esac

var_append DEPS "lmdb pcre2"

# We use system bundled SSL on RHEL >= 8
if [ "$SYSTEM_SSL" != 1 ]; then
    # zlib is a compression library witch is a dependency of OpenSSL.
    # However, can we remove it (CFE-4013)?
    var_append DEPS "zlib"

    # A toolkit for TLS
    var_append DEPS "openssl"
fi

# libsasl needed for solaris
case "$OS_FAMILY" in
solaris | hpux)
    # Generic library that implements the Simple Authentication and Security Layer (SASL) framework
    var_append DEPS "sasl2"
    ;;
esac

# Common dependencies
var_append DEPS "libxml2"   # Library for parsing XML
var_append DEPS "libyaml"   # Library for parsing YAML
var_append DEPS "diffutils" # Library for comparing files
var_append DEPS "librsync"  # Library for synchronization of files
var_append DEPS "lmdb"      # Library for key-value store, used extensively by CFEngine components (cf-agent, etc)
var_append DEPS "pcre2"     # Library for compiling/matching regex

# Enterprise only dependencies
case "$PROJECT" in
nova)
    # openldap is used for storing accounts, passwords and group memberships
    # - Agent has LDAP related policy functions
    # - Mission Portal uses LDAP for authentication functionality
    var_append DEPS "openldap"

    # leech is used for efficient synchronization of tabular data.
    # - cf-hub requests state changes from cf-serverd
    # - state changes are recorded by cf-agent
    var_append DEPS "leech"
    ;;
esac

# Non-exotics dependencies
case "$OS_FAMILY" in
hpux | aix | solaris | freebsd | mingw) ;;
*)
    # Library for managing Extended Attributes (xattrs) on filesystems
    var_append DEPS "libattr"

    # POSIX Access Control Lists (ACLs) on filesystems
    var_append DEPS "libacl"
    ;;
esac

# ROLE
# We can autodetect if we are building a hub or an agent, but
# that is suboptimal since the list might change at any time or
# we might want to build an agent package for a platform that is a hub
# or viceversa. By default we assume the old behavior but if the
# environment variable EXPLICIT_ROLE is defined, then we change our behavior
# and build according to the role specified by it.

case "$EXPLICIT_ROLE" in
agent) ROLE=agent ;;
hub) ROLE=hub ;;
*)
    # Not running under Jenkins?
    if [ -z "$JENKINS_SERVER_COOKIE" ]; then
        case "$PROJECT-$ARCH-$OS-${OS_VERSION}" in
        community-*) ROLE=agent ;;
        # We do not support 32 bits hubs anymore
        nova-i386-*-*) ROLE=agent ;;
        nova-s390*-*-*) ROLE=agent ;;
        nova-*-centos-*) ROLE=hub ;;
        nova-*-debian-*) ROLE=hub ;;
        nova-*-opensuse-*) ROLE=hub ;;
        nova-*-rhel-*) ROLE=hub ;;
        nova-*-sles-*) ROLE=hub ;;
        nova-*-ubuntu-*) ROLE=hub ;;
        nova-*-mingw-*) ROLE=agent ;;
        nova-*) ROLE=agent ;;
        *)
            echo "Unknown project: $PROJECT"
            exit 42
            ;;
        esac
        echo "Autodetected $ROLE role based on missing Jenkins label and OS."

    else # we are running under Jenkins

        # The "label" variable is set in multi-matrix jobs;
        # thus it is *not set* in the bootstrap job.
        case x"$label" in
        x)
            echo "label is not set, assuming that this is not the main build job; Setting ROLE=agent."
            ROLE=agent
            ;;
        *_HUB_*)
            echo "Autodetected hub role based on '_HUB_' in Jenkins label."
            ROLE=hub
            ;;
        *)
            echo "Autodetected agent role based on missing '_HUB_' in Jenkins label."
            ROLE=agent
            ;;
        esac
    fi
    ;;
esac

export ROLE

## PHP modules

case "$ROLE" in
# HUB-ONLY dependencies
hub)
    # Note that we make a separate curl package for the hub.
    # This is because the hub will include the curl binary, but we don't want that for the clients.
    var_append DEPS "libcurl-hub"  # Provides API for performing network requests
    var_append DEPS "nghttp2"      # Provides implementation of the HTTP/2 protocol
    var_append DEPS "libexpat"     # Provides stream-oriented XML parser
    var_append DEPS "apr apr-util" # Provides a common interface to underlying OS features (used by Apache)
    var_append DEPS "apache"       # Provides HTTP server
    var_append DEPS "git"          # Provides a version control system
    var_append DEPS "rsync"        # Binary to efficiently synchronize files (used in federated reporting)
    var_append DEPS "postgresql"   # Relational database
    var_append DEPS "php"          # Scripting language for web development
    ;;
# AGENT-ONLY dependencies
agent)
    var_append DEPS "libcurl" # Provides API for performing network requests
    ;;
esac

# Make sure init.d script and systemd service is used where needed.
#
# We install in all Linux platforms, because it does no harm on platforms
# without systemd, and it has the advantage of working out of the box on
# platforms that adopt systemd later.
if [ "$OS_FAMILY" = linux ]; then
    WITH_SYSTEMD=yes
else
    # shellcheck disable=SC2034
    # > WITH_SYSTEMD appears unused. Verify use (or export if used externally).
    # This file is sourced by other scripts that uses it.
    WITH_SYSTEMD=no
fi

# Determine whether or not to run tests
case "$OS_FAMILY" in
mingw | freebsd)
    TESTS=no
    ;;
*)
    TESTS=all
    ;;
esac
export TESTS

# Don't let existing LD_LIBRARY_PATH variables disturb the build.
# Java sets this when Jenkins launches it.
# PS! Solaris shell returns false if the var is already unset.
unset LD_LIBRARY_PATH || true
