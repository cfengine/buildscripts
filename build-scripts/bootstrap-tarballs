#!/bin/sh -x -e

. `dirname "$0"`/functions
. detect-environment
. compile-options
. version

get_GH_PR_info() {
    # Args:
    #   $1 - repo identifier ("project/repo")
    #   $2 - PR identifier (the PR number)
    # Env:
    #   $GITHUB_STATUS_TOKEN - token for GitHub authentication
    # Prints:
    #   $REPO_ID $PR_ID $PR_STATUSES_URL
    #   Where:
    #     $PR_STATUSES_URL - GH API URL to set PR's statuses
    # Returns:
    #   0 - success, 1 - error
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$GITHUB_STATUS_TOKEN" ]; then return 1; fi

    if which jq > /dev/null; then
        URL=$(curl -k -H "Authorization: token $GITHUB_STATUS_TOKEN" https://api.github.com/repos/$1/pulls/$2 |
                  jq ".statuses_url" | tr -d '"')
        status=$?
    else
        URL=$(curl -k -H "Authorization: token $GITHUB_STATUS_TOKEN" https://api.github.com/repos/$1/pulls/$2 |
                  grep "statuses_url" | head -n1 | sed -r 's/\s+"statuses_url": "([^"]+)",/\1/')
        status=$?
    fi

    echo "$1 $2 $URL"
    return $status
}


mkdir -p $BASEDIR/output/tarballs

cd $BASEDIR/core
rm cfengine-3.*.tar.gz || true
git rev-parse HEAD > $BASEDIR/output/core-commitID
# Configure in order to run "make dist", deleted later.
./configure
make dist
mv cfengine-3.*.tar.gz $BASEDIR/output/tarballs/
make distclean

cd $BASEDIR/masterfiles
rm cfengine-masterfiles*.tar.gz || true
git rev-parse HEAD > $BASEDIR/output/masterfiles-commitID
# Configure in order to run "make dist", deleted later.
./configure
make dist                                               # source tarball
make tar-package                                       # package tarball
test -s cfengine-masterfiles*.tar.gz # ensure the files exist and are non-zero in size
mv cfengine-masterfiles*.tar.gz $BASEDIR/output/tarballs/
make distclean

cd $BASEDIR/output/tarballs
sha256sum *.tar.gz > sha256sums.txt
CKSUM=`sum sha256sums.txt | cut -d ' ' -f 1`
mv sha256sums.txt sha256sums.$CKSUM.txt

# Find all pull requests referenced in GIT_BRANCH_n env vars.
# These PRs will have to be notified of build progress.

# the rest of the script is not really critical
set +e

# Loop through all existing $GIT_COMMIT_n variables
i=1
while [ ! -z "$(eval "echo \$GIT_COMMIT_$i")" ] ; do
	# We're interested only in pull requests - they look like this:
	# $GIT_BRANCH_1=origin/pull/260/{head,merge}
	# We can remove this `if` (or replace it with `if true; then`)
	# to try to report to Github for all commits,
	# but this info won't be visible in Github UI anyway
	if expr "$(eval "echo \$GIT_BRANCH_$i")" : 'origin/pull/[0-9]*/' ; then
		# extract repo name from git url.
		# For example, we want to get 'cfengine/core' part from this:
		# GIT_URL_2=git@github.com:cfengine/core.git
		REPO="$(eval "echo \$GIT_URL_$i" | cut -d ':' -f 2 | cut -d '.' -f 1)"

		PULL="$(eval "echo \$GIT_BRANCH_$i" | cut -d '/' -f3)"
		get_GH_PR_info $REPO $PULL >> $BASEDIR/output/PRs
	fi
	i=$((i+1))
done

(
if test -f "$BASEDIR/mission-portal/public/scripts/package.json"; then
  cd $BASEDIR/mission-portal/public/scripts
  # install dependencies from npmjs
  npm i --prefix $BASEDIR/mission-portal/public/scripts/
  # make a build of jquery-ui from sources
  cd node_modules/jquery-ui
  npm i --prefix $BASEDIR/mission-portal/public/scripts/node_modules/jquery-ui
  nodejs node_modules/grunt-cli/bin/grunt sizer concat
  cp -r ./themes/base/images/ ./dist/
  rm -rf ./node_modules
fi
)

(
if test -f "$BASEDIR/mission-portal/composer.json"; then
  cd $BASEDIR/mission-portal
  # install PHP dependencies from composer
  php /usr/bin/composer.phar install
fi
)
