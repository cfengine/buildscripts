#!/bin/sh -x

. `dirname "$0"`/functions
. detect-environment
. compile-options
. version

# Select what to build

case "$PROJECT-$ROLE" in
  community-*)
    PKG=cfengine-community
    DEB_BUILD_OPTIONS=
    RPMBUILD_OPTIONS=;;
  nova-hub)
    PKG=cfengine-nova-hub
    DEB_BUILD_OPTIONS=
    RPMBUILD_OPTIONS="--define 'with_expansion 1'"
    ;;
  nova-agent)
    PKG=cfengine-nova
    DEB_BUILD_OPTIONS=
    RPMBUILD_OPTIONS=;;
  *)
    echo "Unknown packaging type: $PROJECT-$ROLE"
    exit 42;;
esac

case "$BUILD_TYPE" in
  DEBUG)
    DEB_BUILD_OPTIONS="$DEB_BUILD_OPTIONS noopt nostrip"
    RPMBUILD_OPTIONS="$RPMBUILD_OPTIONS --define 'with_optimize 0'"
    RPMBUILD_OPTIONS="$RPMBUILD_OPTIONS --define 'with_debugsym 1'"
    ;;
  RELEASE|CODE_COVERAGE)
     DEB_BUILD_OPTIONS="nostrip"
    ;;
  *)
    echo "Unknown build type: $BUILD_TYPE"
    exit 42;;
esac

# Clean -devel packages, so their contents doesn't end up in our packages, set env variable for dev trouble shooting
if [ "x$LEAVE_DEVEL_PACKAGES" != "xyes" ]
then
uninstall_cfbuild_devel
fi
# Build it

P="$BASEDIR/buildscripts/packaging/$PKG"

case "$VERSION" in
  *~*)
    # everything before the tilde
    MAIN_VERSION=${VERSION%\~*}
    # everything after the tilde
    SUPP_VERSION=${VERSION#*~};;
  *)
    MAIN_VERSION=${VERSION}
    SUPP_VERSION=;;
esac

case "$PACKAGING" in
  rpm|lpp)
    mkdir -p $BASEDIR/$PKG/BUILD
    mkdir -p $BASEDIR/$PKG/RPMS
    mkdir -p $BASEDIR/$PKG/SOURCES
    mkdir -p $BASEDIR/$PKG/SRPMS

    SPEC=$P/$PKG.spec
    PREINSTALL=$P/generated.preinstall
    POSTINSTALL=$P/generated.postinstall
    PREREMOVE=$P/generated.preremove
    POSTREMOVE=$P/generated.postremove

    if [ "$PACKAGING" = lpp ]
    then
        SPECIN=$P/$PKG.spec.aix.in
    else
        SPECIN=$P/$PKG.spec.in
    fi

    $P/../common/produce-script $PKG preinstall rpm > $PREINSTALL
    $P/../common/produce-script $PKG postinstall rpm > $POSTINSTALL
    $P/../common/produce-script $PKG preremove rpm > $PREREMOVE
    $P/../common/produce-script $PKG postremove rpm > $POSTREMOVE


    RPM_VERSION=$MAIN_VERSION

    # Set RPM_RELEASE, which sets the "release" tag in the RPM spec
    # file, which is an incremental version of the specific package in
    # case it is rebuilt and re-released for any reason.

    if [ -z "$SUPP_VERSION" ]
    then

        if [ $BUILD_TYPE = "RELEASE" ]
        then
            RPM_RELEASE=${EXPLICIT_RELEASE:-1}
        else
            RPM_RELEASE=$BUILD_NUMBER
        fi

    else
        # SUPP_VERSION is the part of the git tag after the dash, e.g. build1

        if [ $BUILD_TYPE = "RELEASE" ]
        then
            RPM_RELEASE=$SUPP_VERSION
        else
            RPM_RELEASE=$SUPP_VERSION.$BUILD_NUMBER
        fi
    fi

    sed \
        -e "s/@@VERSION@@/$RPM_VERSION/g" \
        -e "s/@@RELEASE@@/$RPM_RELEASE/g" \
        -e "/^%pre\$/r $PREINSTALL" \
        -e "/^%post\$/r $POSTINSTALL" \
        -e "/^%preun\$/r $PREREMOVE" \
        -e "/^%postun\$/r $POSTREMOVE" \
        $SPECIN > $SPEC

    for i in `find $BASEDIR/buildscripts/packaging/$PKG ! -name "*.spec"`
    do
        (cd $BASEDIR/$PKG/SOURCES; ln -sf $i) || false
    done

    # eval and double quoting is needed to separate args,
    # example cmd --define 'a b':
    #     - argv[1] = --define
    #     - argv[2] = a b
    eval $RPMBUILD_CMD -bb \
      --define "'_topdir $BASEDIR/$PKG'" \
      --define "'buildprefix $BUILDPREFIX'" \
      --define "'_basedir $BASEDIR'" \
      $RPMBUILD_OPTIONS $SPEC


    if [ "$PACKAGING" = lpp ]
    then
        # Create AIX bff packages
        chmod +x $P/$PKG.bff.sh
        $P/$PKG.bff.sh $RPM_VERSION.$RPM_RELEASE $BASEDIR
    else
        # Create TAR package
        TARBALL=$BASEDIR/$PKG/RPMS/$PKG-$VERSION.$ARCH.pkg.tar.gz
	# RHEL4 and RHEL6 have buildroot in different folders.
	# Below lines try to be careful about finding it.
	# Note that `mv` command will fail and abort the build
	# if it was found incorrectly (doesn't have expected subdirs)
        cd $BASEDIR/$PKG/
        [ -d BUILDROOT ] && cd BUILDROOT
        [ -d $PKG-* ] && cd $PKG-*
        mv usr etc var/cfengine/share/
        tar czvf $TARBALL .  > $TARBALL.filelist
    fi
    ;;

  deb)
    if [ "$BUILDPREFIX" = "/opt/cfengine" ]
    then
       #change the base path of cfengine files
        for i in $P/debian/$PKG*;  do
          sed -i "s/var/opt/g" $i
        done 
    fi

    rm -rf $BASEDIR/$PKG/pkg
    mkdir -p $BASEDIR/$PKG/pkg
    cp -a $P/* $BASEDIR/$PKG/pkg

    if [ $BUILD_TYPE = "RELEASE" ]
    then

      if [ -z $EXPLICIT_RELEASE ]
      then
          DEB_VERSION=$VERSION-1
        else
          DEB_VERSION=$VERSION-$EXPLICIT_RELEASE
        fi

   else
      DEB_VERSION=$VERSION~$BUILD_NUMBER
    fi


    sed -e "s/@@VERSION@@/$DEB_VERSION/" $BASEDIR/$PKG/pkg/debian/changelog.in > $BASEDIR/$PKG/pkg/debian/changelog

    $P/../common/produce-script $PKG preinstall deb > $BASEDIR/$PKG/pkg/debian/$PKG.preinst
    $P/../common/produce-script $PKG postinstall deb > $BASEDIR/$PKG/pkg/debian/$PKG.postinst
    $P/../common/produce-script $PKG preremove deb > $BASEDIR/$PKG/pkg/debian/$PKG.prerm
    $P/../common/produce-script $PKG postremove deb > $BASEDIR/$PKG/pkg/debian/$PKG.postrm

    (cd $BASEDIR/$PKG/pkg; export DEB_BUILD_OPTIONS="$DEB_BUILD_OPTIONS"; dpkg-buildpackage -b -us -uc -rfakeroot) || false

    # Create TAR package
    TARBALL=$BASEDIR/$PKG/pkg/$PKG-$VERSION.$ARCH.pkg.tar.gz
    cd $BASEDIR/$PKG/pkg/debian/tmp/
    mv usr etc var/cfengine/share/
    tar czvf $TARBALL .  > $TARBALL.filelist
    ;;

  solaris)
    PREFIX=/var/cfengine
    sudo rm -rf $BASEDIR/$PKG/pkg
    mkdir -p $BASEDIR/$PKG/pkg

    rsync -lpr $BASEDIR/cfengine/dist/* $BASEDIR/$PKG/pkg/
    rsync -lpr /var/cfengine/bin/* $BASEDIR/$PKG/pkg/var/cfengine/bin/
    rsync -lpr /var/cfengine/lib/* $BASEDIR/$PKG/pkg/var/cfengine/lib/

    cd $BASEDIR/$PKG/pkg
    # IMPORTANT: Before this step, do not copy any files into the current
    # directory that shouldn't be in the package, otherwise they will be
    # included as package files.
    pkgproto .=/ > ../prototype.tmp
    mv ../prototype.tmp .

    # Paste several things together in the prototype.
    (
      cat $P/solaris/prototype.head
      # Replace last two words with "root root" and filter out directories that
      # aren't ours.
      sed -e 's/^\([fd].* \)[^ ][^ ]*  *[^ ][^ ]*$/\1root root/' prototype.tmp | egrep '^([^d]|d none /var/cfengine)'
    ) > prototype

    ARCH=`uname -p`
    sed -e "s/@@PKG@@/$PKG/g;s/@@ARCH@@/$ARCH/g;s/@@VERSION@@/$VERSION/g" $P/solaris/pkginfo.in > $BASEDIR/$PKG/pkg/pkginfo

    $P/../common/produce-script $PKG preinstall pkg > preinstall
    $P/../common/produce-script $PKG postinstall pkg > postinstall
    $P/../common/produce-script $PKG preremove pkg > preremove
    $P/../common/produce-script $PKG postremove pkg > postremove

    pkgmk -o -r `pwd` -d $BASEDIR/$PKG/pkg
    NAME=CFE$PKG-$VERSION-$ARCH.pkg
    pkgtrans -o -s $BASEDIR/$PKG/pkg $BASEDIR/$PKG/$NAME CFE$PKG
    ;;
  freebsd)
      PREFIX=${PREFIX:-/var/cfengine}
      INSTALL_ROOT="${BASEDIR}/${PKG}/pkg"
      CF_DIR="${INSTALL_ROOT}${PREFIX}"
      COREBASE="${CF_DIR}/share/CoreBase"
      PKG_VERSION="${MAIN_VERSION}"
      MANIFEST="${BASEDIR}/${PKG}/${PKG}-MANIFEST"
      MANIFEST_IN="${P}/freebsd/${PKG}-MANIFEST.in"
      PLIST="${P}/freebsd/${PKG}-pkg-plist"
      if [ -z "${SUPP_VERSION}" ]
      then
          if [ "${BUILD_TYPE}" = 'RELEASE' ]
          then
              PKG_RELEASE=${EXPLICIT_RELEASE:-_1}
          else
              PKG_RELEASE="_${BUILD_NUMBER}"
          fi
      else
          # SUPP_VERSION is the part of the git tag after the dash, e.g. build1
          if [ "${BUILD_TYPE}" = 'RELEASE' ]
          then
              PKG_RELEASE="_${SUPP_VERSION}"
          else
              PKG_RELEASE="_${SUPP_VERSION},${BUILD_NUMBER}"
          fi
      fi
      if [ '_' = "${PKG_RELEASE}" ] || [ '_1' = "${PKG_RELEASE}" ]
      then
          PKG_RELEASE=''
      fi

      if [ ! -r "${MANIFEST_IN}" ]
      then
          fatal "No input -MANIFEST (${MANIFEST_IN})"
      fi
      /usr/local/bin/sudo /bin/rm -rf ${INSTALL_ROOT}
      /bin/mkdir -p ${CF_DIR}
      # Generate -MANIFEST
      /usr/bin/sed \
          -e "s,@@VERSION@@,${PKG_VERSION},g" \
          -e "s,@@RELEASE@@,${PKG_RELEASE},g" \
          ${MANIFEST_IN} >${MANIFEST}
      
      # Bring over compiled CFEngine files
      /bin/cp -pr $BASEDIR/cfengine/dist/var/cfengine/* ${CF_DIR}/
      # Bring over dependency binaries and libraries
      /bin/cp -a /var/cfengine/bin/ ${CF_DIR}/bin/
      /bin/cp -a /var/cfengine/lib/ ${CF_DIR}/lib/

      # Remove things we don't need
      /bin/rm -rf ${CF_DIR}/lib/cmake ${CF_DIR}/lib/pkgconfig 
      
      # Shuffle some files about for Community Edition
      if [ "${PROJECT}" = 'community' ]
      then
          /bin/mkdir -p ${COREBASE}
          /bin/mv ${CF_DIR}/masterfiles ${COREBASE}/masterfiles
          /bin/mv ${CF_DIR}/modules     ${COREBASE}/modules
      fi
      
      # Modify profile.sh, rc script, and dynamic linker config
      /bin/mkdir -p ${INSTALL_ROOT}/usr/local/etc/profile.d
      /bin/mkdir -p ${INSTALL_ROOT}/usr/local/etc/rc.d
      /bin/mkdir -p ${INSTALL_ROOT}/usr/local/libdata/ldconfig
      /usr/bin/sed -e "s,@@PREFIX@@,${PREFIX},g" \
                   ${P}/../common/freebsd/profile.sh >${INSTALL_ROOT}/usr/local/etc/profile.d/cfengine3.sh
      /usr/bin/sed -e "s,@@PREFIX@@,${PREFIX},g" -e "s,@@PROJECT@@,${PROJECT},g" \
                   ${P}/../common/freebsd/cfengine3.rc >${INSTALL_ROOT}/usr/local/etc/rc.d/cfengine3
      /bin/chmod 755 ${INSTALL_ROOT}/usr/local/etc/rc.d/cfengine3
      /usr/bin/sed -e "s,@@PREFIX@@,${PREFIX},g" \
                   ${P}/../common/freebsd/cfengine3.ldconfig >${INSTALL_ROOT}/usr/local/libdata/ldconfig/cfengine3

      echo 'scripts {' >>${MANIFEST}
      { echo '    pre-install    = <<EOD' ; $P/../common/produce-script $PKG preinstall  freebsd | /usr/bin/sed -e "s,@@PREFIX@@,${PREFIX},g" ; echo 'EOD' ; } >>${MANIFEST}
      { echo '    post-install   = <<EOD' ; $P/../common/produce-script $PKG postinstall freebsd | /usr/bin/sed -e "s,@@PREFIX@@,${PREFIX},g" ; echo 'EOD' ; } >>${MANIFEST}
      { echo '    pre-deinstall  = <<EOD' ; $P/../common/produce-script $PKG preremove   freebsd | /usr/bin/sed -e "s,@@PREFIX@@,${PREFIX},g" ; echo 'EOD' ; } >>${MANIFEST}
      { echo '    post-deinstall = <<EOD' ; $P/../common/produce-script $PKG postremove  freebsd | /usr/bin/sed -e "s,@@PREFIX@@,${PREFIX},g" ; echo 'EOD' ; } >>${MANIFEST}
      echo '}' >>${MANIFEST}

      # Design Center
      /bin/mkdir -p ${CF_DIR}/design-center
      if [ "${PROJECT}" = 'community' ]
      then
          /bin/mv ${COREBASE}/masterfiles/sketches ${COREBASE}/sketches
      else
          /bin/cp -a ${BASEDIR}/design-center/sketches ${CF_DIR}/design-center/sketches
      fi
      /bin/cp -a ${BASEDIR}/design-center/tools/*  ${CF_DIR}/design-center
      
      if [ ! -r "${PLIST}" ]
      then
          fatal "No input -pkg-plist (${PLIST})"
      fi

      /bin/cat "${PLIST}" | while read pathtype pathname
      do
          pathname=$(echo $pathname | sed -e 's/"//g')
          case "${pathtype}" in
              dir)
                  echo "     \"${pathname}\" \"y\"" >>${MANIFEST}
                  ;;
              file)
                  sha256=$(/sbin/sha256 -q ${INSTALL_ROOT}${pathname})
                  echo "    \"${pathname}\" \"${sha256}\"" >>${MANIFEST}
                  ;;
              link)
                  echo "    \"${pathname}\" -" >>${MANIFEST}
                  ;;
              files*|directories*)
                  echo "${pathtype}: {" >>${MANIFEST}
                  ;;
              -)
                  echo '}' >>${MANIFEST}
                  ;;
              *)
                  fatal "Unknown path type"
                  ;;
          esac
      done

      # Make every owned by root:wheel
      /usr/local/bin/sudo /usr/sbin/chown -R root:wheel ${INSTALL_ROOT}
      
      /usr/local/bin/sudo /usr/local/sbin/pkg create \
                          --verbose \
                          --manifest ${MANIFEST} \
                          --root-dir ${INSTALL_ROOT} \
                          --out-dir ${BASEDIR}/${PKG}
      ;;
  hpux)
      PREFIX=/var/cfengine
      ARCH=$UNAME_M
      OS_VER=$UNAME_R

      rm -rf $BASEDIR/$PKG/pkg
      mkdir -p $BASEDIR/$PKG/pkg${PREFIX}

      cp -pr $BASEDIR/cfengine/dist/* $BASEDIR/$PKG/pkg
      cp -pr /var/cfengine/lib/* $BASEDIR/$PKG/pkg${PREFIX}/lib

      PREINSTALL=$BASEDIR/$PKG/pkg/generated.preinstall
      POSTINSTALL=$BASEDIR/$PKG/pkg/generated.postinstall
      PREREMOVE=$BASEDIR/$PKG/pkg/generated.preremove
      POSTREMOVE=$BASEDIR/$PKG/pkg/generated.postremove

      $P/../common/produce-script $PKG preinstall depot > $PREINSTALL
      $P/../common/produce-script $PKG postinstall depot > $POSTINSTALL
      $P/../common/produce-script $PKG preremove depot > $PREREMOVE
      $P/../common/produce-script $PKG postremove depot > $POSTREMOVE

      cd $BASEDIR/$PKG/pkg/

      $P/hpux/psf.pl . $PKG $VERSION > $BASEDIR/$PKG/$PKG-$VERSION.psf
      /usr/sbin/swpackage -s $BASEDIR/$PKG/$PKG-$VERSION.psf -x media_type=tape @ $BASEDIR/$PKG/pkg/$PKG-$VERSION-$OS_VER-$ARCH.depot
      ;;
  msi)
    package-msi;;
  *)
    echo "Unknown packaging system: $PACKAGING"
    exit 1;;
esac

#TARBALL=$BASEDIR/$PKG/cfengine-$VERSION.generic-pkg.tar.gz
#tar czf $TARBALL /var/cfengine
