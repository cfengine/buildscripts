# -*- mode:sh -*-

#
# Always *source* this file, not execute! Always after you first
# sourced "functions". Like that:
#   . `dirname "$0"`/functions
#   . detect-environment
#

if [ "$_IS_FUNCTIONS_SOURCED" != yes ]
then
    echo 'FATAL: You must source "functions" script before "detect-environment"!'
    exit 100
fi


detect_labels()
{
  case "$label" in
    *_x86_64_mingw*)
      CROSS_TARGET=${CROSS_TARGET:-x64-mingw}
      export CROSS_TARGET
      ;;
    *_i386_mingw*)
      CROSS_TARGET=${CROSS_TARGET:-x86-mingw}
      export CROSS_TARGET
      ;;
  esac
}

detect_os()
{
  case "$CROSS_TARGET" in
    '')
      case "$UNAME_S" in
	Linux)
          OS_FAMILY=linux
          detect_distribution;;
	SunOS)
          OS_FAMILY=solaris
          OS=solaris
          OS_VERSION=`echo $UNAME_R | sed -e 's/^5\.//'`
          ;;
	AIX)
          OS_FAMILY=aix
          OS_VERSION=`uname -v`.$UNAME_R
          OS=aix
          unset LIBPATH
          ;;
	Darwin)
          OS_FAMILY=darwin
          OS=darwin;;
	FreeBSD)
          OS_FAMILY=freebsd
          OS=freebsd;;
	NetBSD)
          OS_FAMILY=netbsd
          OS=netbsd;;
        HP-UX)
          OS_FAMILY=hpux
          OS=hpux;;
	*)
	  echo "Unable to detect operating system: $UNAME_S"
	  exit 42;;
      esac
      ;;
    *-mingw)
      OS_FAMILY=mingw
      OS=mingw;;
    *)
      echo "Unknown cross-compilation target: $CROSS_TARGET"
      exit 42;;
  esac

  export OS OS_VERSION
}

detect_distribution()
{
  if [ -f /etc/redhat-release ]; then
    REL=$(cat /etc/redhat-release)
    case "$REL" in
      "CentOS "*)
        VER="$(echo "$REL" | sed -e 's/^CentOS.* release \([0-9][0-9]*\.[0-9][0-9]*\).*$/\1/')"
        if ! echo "$VER" | egrep '^[0-9]+\.[0-9]+$' > /dev/null
        then
          echo "Unknown CentOS version: $VER"
          exit 42
        fi

        OS=centos
        OS_VERSION="$VER"
        ;;
      "Red Hat Enterprise Linux AS release "*)
        VER=${REL#Red Hat Enterprise Linux AS release }
        case "$VER" in
          [0-9]" "*)
            MAJOR=${VER%% *};;
          *)
            echo "Unknown RHEL AS major version: $VER"
            exit 42;;
        esac

        case "$VER" in
          *Update" "[0-9]")")
            MINOR=${VER#*Update }
            MINOR=${MINOR%\)};;
          *)
            echo "Unknnown RHEL AS minor version: $VER"
            exit 42;;
        esac

        OS=rhel
        OS_VERSION="$MAJOR.$MINOR"
        ;;
      "Red Hat Enterprise Linux Server release "*)
        VER=${REL#Red Hat Enterprise Linux Server release }
        VER=${VER% \(*};
        case "$VER" in
          [0-9].[0-9]);;
          *)
          echo "Unknown RHEL Server version: $VER"
          exit 42;;
        esac

        OS=rhel
        OS_VERSION="$VER"
        ;;
      *)
        echo "Unknown RedHat-like distribution: $REL"
        exit 42;;
    esac
  elif [ -f /etc/lsb-release ] && grep -q Ubuntu /etc/lsb-release; then
    REL=$(grep DISTRIB_RELEASE= /etc/lsb-release)
    REL=${REL#DISTRIB_RELEASE=}
    case "$REL" in
      [0-9].[0-9][0-9]|[0-9][0-9].[0-9][0-9])
        ;;
      *)
        echo "Unknown Ubuntu release: $REL"
        exit 42;;
    esac

    OS=ubuntu
    OS_VERSION="$REL"
  elif [ -f /etc/debian_version ]; then
    REL=$(cat /etc/debian_version)
    if ! echo "$REL" | egrep '^[0-9]+\.[0-9]+(\.[0-9]+)?$' > /dev/null
    then
      case "$REL" in
        wheezy*)
          REL=7.0
          ;;
        jessie*)
          REL=8.0
          ;;
        stretch*)
          REL=9.0
          ;;
        buster*)
          REL=10.0
          ;;
        *)
          echo "Unable to detect version of Debian: $REL"
          exit 42;;
      esac
    fi

    OS=debian
    OS_VERSION="$REL"
  elif [ -f /etc/SuSE-release ]; then
    REL=$(head -n1 /etc/SuSE-release)
    case "$REL" in
      "SUSE Linux Enterprise Server "*)
        MAJOR=$(grep '^VERSION' /etc/SuSE-release | awk '{print $3}')
        MINOR=$(grep '^PATCHLEVEL' /etc/SuSE-release | awk '{print $3}')

        if [ -z "$MAJOR" -o -z "$MINOR" ]; then
          echo "Unable to detect version of SLES: $MAJOR.$MINOR"
        fi

        OS=sles
        OS_VERSION="$MAJOR.$MINOR"
        ;;
      "openSUSE "*)
        VERSION=$(grep '^VERSION' /etc/SuSE-release | awk '{print $3}')
        OS=opensuse
        OS_VERSION="$VERSION"
        ;;
      *)
        echo "Unknown SUSE distribution: $REL"
        exit 42;;
    esac
  fi

  if [ -z "$OS" ]; then
    echo "Failed to detect Linux distribution"
    exit 42
  fi

  if [ -z "$OS_VERSION" ]; then
    echo "Failed to detect Linux distribution version"
    exit 42
  fi
}

detect_packaging()
{
  if [ -f /bin/rpm ]; then
    DEP_PACKAGING=rpm
  elif [ -f /usr/bin/dpkg ]; then
    DEP_PACKAGING=deb
  elif [ -f /usr/sbin/pkgadd ]; then
    DEP_PACKAGING=solaris
  elif [ -f /usr/sbin/pkg_add ]; then
    case "$UNAME_S" in
	  FreeBSD)
	    DEP_PACKAGING=freebsd;;
	esac
  elif [ -f /usr/sbin/swinstall ]; then
    DEP_PACKAGING=hpux
  else
    echo "Unknown packaging system"
    exit 42
  fi

  case "$OS" in
    aix)
      PACKAGING=lpp;;
    mingw)
      PACKAGING=msi;;
    *)
      PACKAGING=$DEP_PACKAGING;;
  esac

  export DEP_PACKAGING PACKAGING
}

detect_arch()
{
  case "$DEP_PACKAGING" in
    deb)
      ARCH=`dpkg --print-architecture`;;
    rpm)
      ARCH=`rpm --eval '%{_arch}'`;;
    solaris)
      case $UNAME_M in
        sun*)
          ARCH=sparc;;
        i86pc)
          ARCH=i86pc;;
        *)
          echo "Unknown Solaris architecture: $UNAME_M";;
      esac;;

    freebsd)
      ARCH=$UNAME_M
      OS_VERSION=$UNAME_R ;;
    hpux)
      ARCH=$UNAME_M
      OS_VERSION=$UNAME_R ;;
    *)
      echo "Unknown packaging system"
      exit 42;;
  esac

  case "$CROSS_TARGET" in
    '')
      ;;
    x86-*)
      ARCH=x86;;
    x64-*)
      ARCH=x64;;
    *)
      echo "Unknown cross-compilation target: $CROSS_TARGET"
      exit 42;;
  esac

  export ARCH
}

detect_tools()
{
    # We look for GNU Make because
    # various dependencies have various requirements
    MAKE=`func_whereis gmake make`

    if $MAKE -v | grep GNU
    then
        export MAKE
    else
        fatal "GNU Make not found"
    fi

    if [ "x$OS" = "xaix" ] && [ "x$OS_VERSION" = "x5.3" ]; then
        RPMBUILD_CMD=rpm
    else
        RPMBUILD_CMD=rpmbuild
    fi
    export RPMBUILD_CMD

    FUSER=`func_whereis fuser`
    export FUSER

    PATCH=`func_whereis gpatch patch`
    export PATCH
}

detect_cores()
{
  case "$OS_FAMILY" in
    aix)
      echo "Detected OS family is aix"
      NUM_CORES="$(lscfg | grep proc | wc -l)";;
    solaris)
      echo "Detected OS family is solaris"
      NUM_CORES="$(psrinfo |wc -l)";;
    linux)
      echo "Detected OS family is linux"
      NUM_CORES="$(cat /proc/cpuinfo | grep '^processor' | wc -l)";;
    hpux)
      echo "Detected OS family is hpux"
      NUM_CORES="$(ioscan -k -C processor |grep processor | wc -l)";;
    *)
      echo "Detected OS family is UNKNOWN, defaulting amount of CPU cores to 1"
      NUM_CORES=1;;
  esac

  # Make number of jobs one higher than core count, to account for I/O, network, etc.
  echo "Detected amount of CPU cores is $NUM_CORES"
  MAKEFLAGS="${MAKEFLAGS:--j$(($NUM_CORES + 1))}"
  export MAKEFLAGS
}

detect_environment()
{
  detect_labels
  detect_os
  detect_packaging
  detect_arch
  detect_tools
  detect_cores
}

#
# We need to detect the following pieces of data:
#  - distribution
#  - version
#  - architecture
#  - packaging tool (dpkg, rpm, solaris pkg, ...)
#
detect_environment

# Print the environment variables so that the log can be used to debug problems
# stemming from wrong environment.
echo
echo
echo "==================== Current environment ========================"
env
echo "================================================================="
echo
echo
