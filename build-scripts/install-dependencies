#!/bin/sh

. `dirname "$0"`/functions
. detect-environment
. compile-options

# We use packaging scripts
PATH=$PATH:$BASEDIR/buildscripts/deps-packaging

# Not all dependencies support building in parallel.
MAKEFLAGS=-j1

set -x

# This should be already set from sourcing "functions" at the top, but
# make sure, because we don't want build-artifacts-cache to have bogus
# packages.
set -e


install_pkg_files()
{
    retry_wrapper  pkg-install-$DEP_PACKAGING  "$@"
}


# OpenSSL 1.1 requires Perl 5.10.0 and some modules existing only in 5.13.4 to
# build and test properly, so we require 5.13.4 at least.  See NOTES.PERL in
# OpenSSL.
#
# By doing this, we rebuild on each and every platform. TODO create a proper
# package for perl.
#
# NOTE: openssl also needs Module::Load::Conditional, which we install in the
# cloud-init script (package libmodule-load-conditional-perl for debians and
# perl-Module-Load-Conditional for RHELs).
check_and_install_perl()
{
    [ x"$PERL" = x ]  &&  [ -x "$HOME/perl-my/bin/perl" ]  \
        && PERL="$HOME/perl-my/bin/perl"  \
            || PERL=`func_whereis perl`

    PERL_MINOR_VERSION=`$PERL -e 'print "$]"."\n"' | cut -d. -f2`
    if [ "$PERL_MINOR_VERSION" -lt 013004  ]
    then
        echo "$PERL version is $PERL_MINOR_VERSION," \
             "too old, installing new one from source"

        ### BUILD PERL

        # -fno-stack-protector: Ensure built perl will not depend on libssp.so
        if  echo | gcc -E -fno-stack-protector - >/dev/null 2>&1
        then
            PERL_CFLAGS='-Accflags=-fno-stack-protector'
        fi

        # Solaris 11 insists on having a dependency to libgcc_s.so which
        # resides in /opt/csw/lib. Unfortunately the following hack is not
        # working on other platforms so we have to hide it.
        if [ $OS = solaris ] && [ $OS_VERSION = 11 ]
        then
            PERL_LDFLAGS='-Aldflags=-static-libgcc'
            PERL_LDDLFLAGS='-Alddlflags=-static-libgcc -Alddlflags=-shared'
        fi

        if [ $OS = aix ] && [ $OS_VERSION != 5.3 ]
        then
            # AIX says it provides the nexttoward() 128bit floating point API,
            # but it actually doesn't provide the function. So let's make sure
            # the function is declared missing and not used.
            PERL_EXTRA_FLAGS='-Ud_nexttoward'
        fi

        wget http://www.cpan.org/src/5.0/perl-5.26.1.tar.gz
        [ `func_md5 perl-5.26.1.tar.gz` != "a7e5c531ee1719c53ec086656582ea86" ]  \
            &&  fatal "perl checksum error"
        gzip -dc perl-5.26.1.tar.gz | tar xf -
        cd perl-5.26.1
        $PATCH -p1 < $BASEDIR/buildscripts/build-scripts/perl-488307ffa6.patch
        ./Configure -des -Dprefix=$HOME/perl-my -Dcc=gcc -Dmake=$MAKE \
            $PERL_EXTRA_FLAGS $PERL_CFLAGS $PERL_LDFLAGS $PERL_LDDLFLAGS
        $MAKE
        $MAKE install
        PERL=$HOME/perl-my/bin/perl
    fi

    export PERL
}



check_and_install_perl

# Apply necessary changes for alternate /opt/cfengine prefix
if [ "$BUILDPREFIX" = "/opt/cfengine" ]
then
    sed -i "s:var/cfengine:opt/cfengine:"  \
        $BASEDIR/buildscripts/deps-packaging/*/debian/*.install  \
        $BASEDIR/buildscripts/deps-packaging/*/mingw/debian/*.install \
        $BASEDIR/buildscripts/deps-packaging/apache/httpd.conf \
        $BASEDIR/buildscripts/deps-packaging/apache/httpd-ssl.conf
fi

# Override for manual testing
if [ "x$1" != x ]
then
    DEPS="$@"
fi


for dep in $DEPS
do
    case "$BUILD_TYPE" in
    DEBUG|CODE_COVERAGE)
        optimize=yes
        debugsym=no
        versuffix=+untested
        tests=no;;
    RELEASE)
        optimize=yes
        debugsym=no
        versuffix=+release
        tests=yes;;
    *)
        echo "Unknown build type: $BUILD_TYPE"
        exit 42;;
    esac

    case "$ARCH" in
    x86|x64)
        crossver=+mingw$ARCH
        cross=$ARCH;;
    *)
        crossver=
        cross=native;;
    esac

    revision=$(cat $BASEDIR/buildscripts/deps-packaging/revision)
    version=0+$revision$versuffix$crossver

    # FETCH dependency packages if needed
    package_files=`pkg-cache listpkgfiles $dep-$version`

    # If package cache did not have the packages
    if [ x"$package_files" = x ]
    then
        # BUILD the packages
        $BASEDIR/buildscripts/deps-packaging/pkg-build-$DEP_PACKAGING  \
            $dep $tests $cross $optimize $debugsym $version

        package_files=`pkg-find-$DEP_PACKAGING $BASEDIR/$dep`

        [ x"$package_files" = x ]  &&  \
            fatal "Empty output dir after building dependency: $dep"

        # CACHE the newly built package
        pkg-cache putpkg $dep-$version $package_files

        # CLEAN UP
        rm -f $package_files

        # Now the package should be in the local cache
        package_files=`pkg-cache listpkgfiles $dep-$version`
        [ x"$package_files" = x ]  &&  \
            fatal "Cache did not find package after putpkg"
    fi

    # INSTALL the packages
    install_pkg_files  $package_files

    # keep 50 most recent packages to preserve disk space
    pkg-cache keep_newest 50
done
