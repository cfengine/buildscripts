#!/bin/sh

#
# This script installs the dependencies to be bundled with CFEngine.
# The dependencies are built into you working directory.
#
# The script expects the following repositories to exist side by side:
# .
# ├── buildscripts
# ├── core
# ├── enterprise
# ├── nova
# └── masterfiles
#
# ^ When building community you won't need enterprise, nova.
#
# The script can be run as follows:
# ```
# $ PROJECT=[enterprise|community] EXPLICIT_ROLE=[hub|agent] BUILD_TYPE=[DEBUG|RELEASE] ./buildscripts/build-scripts/install-dependencies
# ```
#

. "$(dirname "$0")"/functions
. detect-environment
. compile-options

# We use packaging scripts
PATH=$PATH:$BASEDIR/buildscripts/deps-packaging

# This should be already set from sourcing "functions" at the top, but
# make sure, because we don't want build-artifacts-cache to have bogus
# packages.
set -e

install_pkg_files() {
    retry_wrapper "pkg-install-$DEP_PACKAGING" "$@"
}

# OpenSSL 1.1 requires Perl 5.10.0 and some modules existing only in 5.13.4 to
# build and test properly, so we require 5.13.4 at least.  See NOTES.PERL in
# OpenSSL.
#
# By doing this, we rebuild on each and every platform. TODO create a proper
# package for perl.
#
# NOTE: openssl also needs Module::Load::Conditional, which we install in the
# cloud-init script (package libmodule-load-conditional-perl for debians and
# perl-Module-Load-Conditional for RHELs).
check_and_install_perl() {
    # Unless $PERL us already set:
    # - set it to $HOME/perl-my/bin/perl if it exists and is executable
    # - otherwise look for it elsewhere
    [ -z "$PERL" ] && [ -x "$HOME/perl-my/bin/perl" ] &&
        PERL="$HOME/perl-my/bin/perl" ||
        PERL=$(func_whereis perl)

    PERL_OK=yes
    PERL_MINOR_VERSION=$($PERL -e 'print "$]"."\n"' | cut -d. -f2)
    if [ "$PERL_MINOR_VERSION" -lt 013004 ]; then
        log_debug "$PERL version is too old (minor version $PERL_MINOR_VERSION)"
        PERL_OK="no"
    fi

    if ! $PERL -e 'use List::Util qw(pairs);'; then
        log_debug $PERL has List::Util that does not export pairs. Needs to be at least version 1.29 for OpenSSL version 3.3.2.
        PERL_OK="no"
    fi

    if [ "$PERL_OK" != "yes" ]; then
        log_debug $PERL is too old or modules are missing, building new one from source...

        # -fno-stack-protector: Ensure built perl will not depend on libssp.so
        if echo | gcc -E -fno-stack-protector - >/dev/null 2>&1; then
            PERL_CFLAGS='-Accflags=-fno-stack-protector'
        fi

        # Solaris 11 insists on having a dependency to libgcc_s.so which
        # resides in /opt/csw/lib. Unfortunately the following hack is not
        # working on other platforms so we have to hide it.
        if [ "$OS" = solaris ] && [ "$OS_VERSION" = 11 ]; then
            PERL_LDFLAGS='-Aldflags=-static-libgcc'
            PERL_LDDLFLAGS='-Alddlflags=-static-libgcc -Alddlflags=-shared'
        fi

        if [ "$OS" = aix ] && [ "$OS_VERSION" != 5.3 ]; then
            # AIX says it provides the nexttoward() 128bit floating point API,
            # but it actually doesn't provide the function. So let's make sure
            # the function is declared missing and not used.
            PERL_EXTRA_FLAGS='-Ud_nexttoward'
        fi

        # NOTE: Only use evenly numbered minor versions of perl
        #       odd numbers, i.e. 5.41.x, will fail with a big unstable warning
        #       from the perl dev team - they are only intended for development
        PERL_VERSION=5.40.1
        PERL_SHA256=02f8c45bb379ed0c3de7514fad48c714fd46be8f0b536bfd5320050165a1ee26

        log_debug Fetching perl tarball...
        run_and_print_on_failure wget https://www.cpan.org/src/5.0/perl-${PERL_VERSION}.tar.gz
        if [ "$(func_sha256 perl-${PERL_VERSION}.tar.gz)" != "${PERL_SHA256}" ]; then
            fatal "perl checksum error"
        fi

        log_debug Extracting perl tarball...
        gzip -dc perl-${PERL_VERSION}.tar.gz | tar xf -
        cd perl-${PERL_VERSION}

        log_debug Running ./Configure on perl project...
        run_and_print_on_failure ./Configure -des -Dprefix="$HOME"/perl-my -Dcc=gcc -Dmake="$MAKE" \
            "$PERL_EXTRA_FLAGS" "$PERL_CFLAGS" "$PERL_LDFLAGS" "$PERL_LDDLFLAGS"

        log_debug Running make on perl project...
        run_and_print_on_failure $MAKE

        log_debug Running make install on perl project...
        run_and_print_on_failure $MAKE install
        PERL=$HOME/perl-my/bin/perl
    fi

    export PERL
}

check_and_install_perl

# non-gnu exotics don't support sed -i,
# and only hub or deb packages use files mentioned below
if [ "$BUILDPREFIX" != /var/cfengine ]; then
    if [ "$DEP_PACKAGING" = deb ] || [ "$ROLE" = hub ]; then
        # Apply necessary changes for alternate prefix
        sed -i "s:/var/cfengine:$BUILDPREFIX:" \
            "$BASEDIR/buildscripts/deps-packaging/*/debian/*.install" \
            "$BASEDIR/buildscripts/deps-packaging/*/mingw/debian/*.install" \
            "$BASEDIR/buildscripts/deps-packaging/apache/httpd.conf"
    fi
fi

# Override for manual testing
if [ -n "$1" ]; then
    log_debug "Overriding dependency list (manual testing)"
    DEPS="$*"
fi

for dep in $DEPS; do
    case "$BUILD_TYPE" in
    DEBUG | CODE_COVERAGE)
        optimize=yes
        debugsym=no
        versuffix=+untested
        tests=no
        ;;
    RELEASE)
        optimize=yes
        debugsym=no
        versuffix=+release
        tests=yes
        ;;
    *)
        fatal "Unknown build type: $BUILD_TYPE"
        ;;
    esac

    case "$ARCH" in
    x86 | x64)
        crossver=+mingw$ARCH
        cross=$ARCH
        ;;
    *)
        crossver=
        cross=native
        ;;
    esac

    # Add $PREFIX to version of built dependencies so they get different package names and are distinguishable from each
    revision=$(cat "$BASEDIR"/buildscripts/deps-packaging/revision)
    if [ "$BUILDPREFIX" != "/var/cfengine" ]; then
        safe_prefix="+$(echo "$PREFIX" | sed 's:/::g')"
    fi
    version=0+$revision$versuffix$crossver$safe_prefix

    # FETCH dependency packages if needed
    package_files=$(pkg-cache listpkgfiles "$dep-$version")

    # If package cache did not have the packages
    if [ -z "$package_files" ]; then
        log_debug Building package $dep...
        # BUILD the packages
        if [ "$dep" = "lmdb" ] && [ "$BUILD_TYPE" != "RELEASE" ]; then
            # Always build LMDB with debug symbols in non-release builds.
            # The reason is an ongoing issue where we fail to open database transactions.
            # See ENT-10777 for more info.
            "$BASEDIR/buildscripts/deps-packaging/pkg-build-$DEP_PACKAGING" \
                "$dep" "$tests" "$cross" "$optimize" yes "$version"
        else
            "$BASEDIR/buildscripts/deps-packaging/pkg-build-$DEP_PACKAGING" \
                "$dep" "$tests" "$cross" "$optimize" "$debugsym" "$version"
        fi

        # Make sure package is there after building it
        package_files=$("pkg-find-$DEP_PACKAGING" "$BASEDIR/$dep")
        if [ -z "$package_files" ]; then
            fatal "Empty output dir after building dependency: $dep"
        fi

        # CACHE the newly built package
        # shellcheck disable=SC2086
        log_debug Caching package $dep...
        pkg-cache putpkg "$dep-$version" $package_files

        # CLEAN UP
        # shellcheck disable=SC2086
        log_debug Removing package files for $dep...
        rm -f $package_files

        # Now the package should be in the local cache
        package_files=$(pkg-cache listpkgfiles "$dep-$version")
        if [ -z "$package_files" ]; then
            fatal "Cache did not find package after putpkg"
        fi
    fi

    # INSTALL the packages
    # shellcheck disable=SC2086
    log_debug Installing package files for $dep...
    install_pkg_files $package_files

    # keep 50 most recent packages to preserve disk space
    pkg-cache keep_newest 50
done
