#!/bin/sh

. `dirname "$0"`/functions
. detect-environment
. compile-options
#
# We use packaging scripts
PATH=$PATH:$BASEDIR/buildscripts/deps-packaging/
#

# Not all dependencies support building in parallel.
MAKEFLAGS=-j1

set -x

# This should be already set from sourcing "function" at the top, but
# make sure, because we don't want build-artifacts-cache to have bogus
# packages.
set -e


#export the prefer path to all the packaging scripts so that the library will gets generated in desired path.
for i in $(ls $BASEDIR/buildscripts/deps-packaging)
do
    if [ -d "$BASEDIR/buildscripts/deps-packaging/$i/debian" ]
    then
        echo "$i"
        case "$BUILDPREFIX" in
        *opt*)
            sed -i "s/var/opt/" $BASEDIR/buildscripts/deps-packaging/$i/debian/*.install
        esac
    fi

    if [ -d "$BASEDIR/buildscripts/deps-packaging/$i/mingw/debian" ]
    then
        case "$BUILDPREFIX" in
        *opt*)
            sed -i "s/var/opt/" $BASEDIR/buildscripts/deps-packaging/$i/mingw/debian/*.install
        esac
    fi

    #change the webdirectory in the apache config file as well
    if [ -d "$BASEDIR/buildscripts/deps-packaging/$i" ]
    then
      if [ "$i" = "apache" ] && [ "$ROLE" = "hub" ] ; then
       escapedPrefix=$(echo $BUILDPREFIX | sed 's/\//\\\//g')
       # This is ugly. Can't we do something better than hard-coding a path in the original config?
       sed -i "s/\/var\/cfengine/$escapedPrefix/g"  $BASEDIR/buildscripts/deps-packaging/apache/httpd.conf
      fi
    fi
done

DEPS=""
case "$OS" in
  mingw)
  ;;
  hpux)
  ;;
  solaris)
  ;;
  aix)
  ;;
  *)
  DEPS="$DEPS lcov"
  ;;
esac

case "$LIBGCC" in
  yes)
    DEPS="$DEPS libgcc";;
esac

case "$PTHREADS_W32" in
  yes)
    DEPS="$DEPS pthreads-w32";;
esac

# FIXME: Why do we need zlib?

DEPS="$DEPS zlib $EMBEDDED_DB openssl pcre"

case "$LIBSASL" in
  yes)
    DEPS="$DEPS sasl2";;
esac

case "$LIBICONV" in
  yes)
    DEPS="$DEPS libiconv";;
esac

case "$GNURX" in
  yes)
    DEPS="$DEPS libgnurx";;
esac

case "$OPENLDAP" in
  yes)
    DEPS="$DEPS openldap";;
esac

case "$LIBCURL" in
  yes)
    DEPS="$DEPS libcurl";;
esac

case "$LIBCURL_HUB" in
  yes)
    DEPS="$DEPS libcurl-hub";;
esac

case "$GIT" in
  yes)
    DEPS="$DEPS git";;
esac

case "$RSYNC" in
  yes)
    DEPS="$DEPS rsync";;
esac

case "$LIBMCRYPT" in
  yes)
    DEPS="$DEPS libmcrypt";;
esac

case "$LIBXML2" in
  yes)
    DEPS="$DEPS libxml2";;
esac

case "$APR" in
  yes)
    DEPS="$DEPS apr";;
esac

case "$APR_UTIL" in
  yes)
    DEPS="$DEPS apr-util";;
esac

case "$APACHE" in
  yes)
    DEPS="$DEPS apache";;
esac

case "$PGSQL" in
  yes)
    DEPS="$DEPS postgresql-hub";;
  *)
    case "$SQL" in
      yes)
        DEPS="$DEPS postgresql";;
    esac
  ;;
esac

case "$PHP" in
  yes)
    DEPS="$DEPS php";;
esac

case "$LIBVIRT" in
  yes)
    DEPS="$DEPS libvirt";;
esac

case "$REDIS" in
  yes)
    DEPS="$DEPS redis";;
esac

case "$LIBATTR" in
  yes)
    DEPS="$DEPS libattr";;
esac

case "$LIBACL" in
  yes)
    DEPS="$DEPS libacl";;
esac

case "$LIBYAML" in
  yes)
    DEPS="libyaml $DEPS";;
esac

#
# Override for manual testing
#
if [ "x$1" != x ]
then
    DEPS="$@"
fi

for dep in $DEPS
do

    case "$BUILD_TYPE" in
    DEBUG|CODE_COVERAGE)
        optimize=yes
        debugsym=no
        versuffix=+untested
        tests=no;;
    RELEASE)
        optimize=yes
        debugsym=no
        versuffix=+release
        tests=yes;;
    *)
        echo "Unknown build type: $BUILD_TYPE"
        exit 42;;
    esac

    case "$ARCH" in
    x86|x64)
        crossver=+mingw$ARCH
        cross=$ARCH;;
    *)
        crossver=
        cross=native;;
    esac

    revision=$(cat $BASEDIR/buildscripts/deps-packaging/revision)
    version=0+$revision$versuffix$crossver

    if pkg-cache find $dep-$version
    then
        if [ x$PKGCACHE_PRUNE != x ]
        then
            echo "Removing package from cache because PKGCACHE_PRUNE is set"
            pkg-cache prune $dep-$version
        else
            echo "Package found in cache, skipping compilation"
        fi

    fi

    # Keep 10 packages around. Should be more than enough for all the main
    # and private branches.
    pkg-cache autoprune $dep 10

    if pkg-cache find $dep-$version
    then
        :
    else
        $BASEDIR/buildscripts/deps-packaging/pkg-build-${DEP_PACKAGING}  \
            $dep $tests $cross $optimize $debugsym $version
        pkg-cache store $dep-$version $(pkg-find-${DEP_PACKAGING} $BASEDIR/$dep)
    fi

    pkg-install-${DEP_PACKAGING} $(pkg-cache list $dep-$version)

done
