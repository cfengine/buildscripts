#!/bin/sh


. `dirname "$0"`/../build-scripts/functions

set -e        # errors are fatal
#set -x       # for debugging

PATH=$PATH:$BASEDIR/buildscripts/deps-packaging          # for pkg-cache
MYNAME=`basename $0`
TMPDIR=/tmp


# Compare filename $1 to checksum $2. If $2 starts with "content=" then
# checksum is computed based on *content* of each contained file,
# instead of the downloaded file itself. Is needed for generated
# downloads.
checksum()
{
    [ $# -lt 2 ]  &&  fatal "$MYNAME: at least 2 args required but got: $*"  2

    LOCAL_FILENAME="$1"
    CHECKSUM="$2"

    TAR=`func_which tar gtar`

    case "$CHECKSUM" in
        content=*)
            CHECKSUM="${CHECKSUM#content=}"              # remove prefix

            rm -rf temp  &&  mkdir -p temp  &&  cd temp

            func_decompress "$LOCAL_FILENAME" | $TAR xf - >/dev/null 2>&1
            # Bogus file created by older versions of tar trying to untar newer archives.
            rm -f pax_global_header

            ACTUAL_CHECKSUM=`find . -type f | env LC_ALL=C sort | xargs cat | func_md5`

            cd ..  &&  rm -rf temp
            ;;
        *)
            ACTUAL_CHECKSUM=`func_md5 $LOCAL_FILENAME` ;;
    esac

    test "$CHECKSUM" = "$ACTUAL_CHECKSUM"
}


# Fetches it from upstream, stores it in $TMPDIR, prints the path.
fetch_file()
{
    [ $# -lt 2 ]  &&  fatal "$MYNAME: at least 2 args required but got: $*"  2

    FILENAME="$1"
    CHECKSUM="$2"

    OUTFILE="$TMPDIR/$FILENAME"
    rm_if_empty "$OUTFILE"
    WGET=`func_whereis wget`

    for URL in $URLS
    do
        # Not all wget versions support --no-check-certificate, so try both forms.
        # Also, the standard output of this function is parsed, so let's make sure
        # wget outputs on standard error. That's what it normally does anyway, but
        # misparsed arguments is an exception.
        $WGET --no-check-certificate -t5 "$URL$FILENAME" -O "$OUTFILE" 1>&2  ||  true

        # Sometimes wget returns error, but leaves an empty file
        rm_if_empty "$OUTFILE"

        # Some wget (1.9.1 on AIX) return 0 even when they failed! So we
        # must test for file existence for retrying.
        # Also, they need an estra parameter to switch to passive mode FTP.
        [ -f "$OUTFILE" ]  ||  $WGET -t5 --passive-ftp "$URL$FILENAME" -O "$OUTFILE" 1>&2  ||  true
        rm_if_empty "$OUTFILE"

        # Try one last time after converting https to http.
        if [ ! -f "$OUTFILE" ]  &&  var_contains URL "https"
        then
            newurl=`echo $URL | sed s/https/http/`
            $WGET -t5 "$newurl$FILENAME" -O "$OUTFILE" 1>&2  ||  true
            rm_if_empty "$OUTFILE"
        fi

        if [ -f "$OUTFILE" ]
        then
            if checksum "$OUTFILE" "$CHECKSUM"
            then
                log_info "Successfully downloaded:" "$OUTFILE"
                echo "$OUTFILE"
                return 0                           # SUCCESSFUL DOWNLOAD
            else
                log_info "WARNING: Downloaded $URL$FILENAME has wrong checksum, deleting"
                rm -f "$OUTFILE"
            fi
        fi
    done

    log_info 'If you get a message about "Unsupported scheme", upload the file manually'
    return 1
}

get_src()
{
    [ $# -lt 2 ]  &&  fatal "$MYNAME: at least 2 args required but got: $*"  2

    DISTFILE="$1"
    shift
    URLS="$@"

    exec <"$DISTFILE"
    read CHECKSUM FILENAME OPTS

    local_filename=`pkg-cache listfile $FILENAME`  ||  true

    if [ -f "$local_filename" ]  &&  checksum "$local_filename" "$CHECKSUM"
    then
        :                        # SUCCESS, do nothing
    else
        [ -f "$local_filename" ]  &&  rm -f "$local_filename"

        tmp_filename=`fetch_file "$FILENAME" $CHECKSUM`

        # Cache it, both locally and remotely, to avoid hitting upstream every time.
        # pkg-cache will also print the locally stored file, which we want.
        pkg-cache putfile $tmp_filename
        rm -f $tmp_filename

        local_filename=`pkg-cache listfile $FILENAME`  \
            ||  fatal "We just stored the file but cache can't find it"
        if [ ! -f "$local_filename" ]  ||  ! checksum "$local_filename" "$CHECKSUM"
        then
            fatal "We just stored the file and the checksum differs"
        fi
    fi

    # Output of this script is the path and an optional field:
    if [ -f "$local_filename" ]
    then
        echo "$local_filename" $OPTS
    else
        echo "ERROR: $MYNAME failed to download and cache $FILENAME from $URLS"  1>&2
        return 1
    fi
}





if [ $# -ne 1 ]
then
    exec >&2
    echo "Download source tarball of a package, as descibed in basedir/distfiles and basedir/source"
    echo "Usage: $MYNAME <basedir>"
    fatal "ERROR, got arguments: $*"  2
fi

PKGDIR=$1

# Exit gracefully if nothing to downbloat.
[ ! -f "$PKGDIR/distfiles" ]  &&  exit 0


# Local mirrors can be added here
DIST_SERVER=
ALT_DIST_SERVER=`cat $PKGDIR/source`

get_src "$PKGDIR/distfiles" $DIST_SERVER $ALT_DIST_SERVER

# The previous get_src line does all the work, and outputs:
# 1. the path to the file locally
# 2. an optional "option" field that may be "subdir"
